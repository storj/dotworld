// Copyright (C) 2021 Storj Labs, Inc.
// See LICENSE for copying information.

// +build ignore

package main

import (
	_ "embed"
	"fmt"
	"image"
	"image/png"
	"os"
	"os/exec"
	"sort"
	"strings"

	"github.com/kr/pretty"
	"storj.io/dotworld"
)

var (
	worldBounds = image.Rect(0, 100, 8192, 3385)
)

const (
	worldGridWidth     = 64
	worldGridThreshold = 0.2
)

func main() {
	pngFH, err := os.Open("world.png")
	if err != nil {
		panic(err)
	}
	defer pngFH.Close()

	rm, err := png.Decode(pngFH)
	if err != nil {
		panic(err)
	}
	m := rm.(*image.Gray)

	grid := dotworld.Grid{
		CountX:    worldGridWidth,
		Threshold: worldGridThreshold,

		Coord: dotworld.PlateCarre{
			Width:  float32(m.Bounds().Dx()),
			Height: float32(m.Bounds().Dy()),
		},
	}

	subimage := m.SubImage(worldBounds).(*image.Gray)

	result := grid.MapFromImage(subimage)

	serialized := pretty.Sprint()
	serialized = strings.Replace(serialized,
		"Locations: {",
		"Locations: map[dotworld.GridPosition]*dotworld.Location{",
		1)

	fh, err := os.Create("world.go")
	if err != nil {
		panic(err)
	}

	_, err = fmt.Fprintf(fh, `// Code generated by storj.io/dotworld. DO NOT EDIT.

package reference

var worldMap = &dotworld.Map{
CountX: %d,
CountY: %d,
Grid: %s,
Bounds: %s,
Locations: map[dotworld.GridPosition]*dotworld.Location{
`,
		result.CountX,
		result.CountY,
		pretty.Sprint(result.Grid),
		pretty.Sprint(result.Bounds))
	if err != nil {
		panic(err)
	}

	keys := make([]dotworld.GridPosition, 0, len(result.Locations))
	for key := range result.Locations {
		keys = append(keys, key)
	}
	sort.Slice(keys, func(i, j int) bool {
		if keys[i].Row < keys[j].Row {
			return true
		}
		if keys[i].Row > keys[j].Row {
			return false
		}
		return keys[i].Col < keys[j].Col
	})

	for _, key := range keys {
		_, err = pretty.Fprintf(fh, "%# v: %# v,\n", key, result.Locations[key])
		if err != nil {
			panic(err)
		}
	}

	_, err = fmt.Fprintf(fh, "},\n}\n")
	if err != nil {
		panic(err)
	}

	err = fh.Close()
	if err != nil {
		panic(err)
	}

	err = exec.Command("gofmt", "-w", "-s", "world.go").Run()
	if err != nil {
		panic(err)
	}

	err = exec.Command("goimports", "-w", "world.go").Run()
	if err != nil {
		panic(err)
	}
}
